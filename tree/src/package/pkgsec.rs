use std::{fs::read_to_string, path::PathBuf};

use super::{PackageError, PackageErrorType};

/// pkgsec.rs - PKGSEC validation

/// Default set of allowed PKGSEC values.
/// This set will be used if autobuild4 is not installed on the host machine.
const DEFAULT_PKGSECS: &[&str] = &[
	"admin",
	"Bases",
	"Cinnamon",
	"cli-mono",
	"comm",
	"cryptocurrency",
	"Cutefish",
	"database",
	"debian-installer",
	"debug",
	"devel",
	"doc",
	"editors",
	"electronics",
	"embedded",
	"fonts",
	"games",
	"gnome",
	"gnu-r",
	"gnustep",
	"graphics",
	"hamradio",
	"haskell",
	"httpd",
	"interpreters",
	"java",
	"kde",
	"kernel",
	"libdevel",
	"libs",
	"lisp",
	"localization",
	"LXDE",
	"LxQt",
	"MATE",
	"mail",
	"math",
	"misc",
	"net",
	"news",
	"ocaml",
	"oldlibs",
	"otherosfs",
	"perl",
	"php",
	"python",
	"ruby",
	"science",
	"shells",
	"sound",
	"tex",
	"text",
	"Trinity",
	"utils",
	"vcs",
	"video",
	"virtual",
	"web",
	"x11",
	"xfce",
	"zope",
	"non-free/admin",
	"non-free/Bases",
	"non-free/Cinnamon",
	"non-free/cli-mono",
	"non-free/comm",
	"non-free/cryptocurrency",
	"non-free/Cutefish",
	"non-free/database",
	"non-free/debian-installer",
	"non-free/debug",
	"non-free/devel",
	"non-free/doc",
	"non-free/editors",
	"non-free/electronics",
	"non-free/embedded",
	"non-free/fonts",
	"non-free/games",
	"non-free/gnome",
	"non-free/gnu-r",
	"non-free/gnustep",
	"non-free/graphics",
	"non-free/hamradio",
	"non-free/haskell",
	"non-free/httpd",
	"non-free/interpreters",
	"non-free/java",
	"non-free/kde",
	"non-free/kernel",
	"non-free/libdevel",
	"non-free/libs",
	"non-free/lisp",
	"non-free/localization",
	"non-free/LXDE",
	"non-free/LxQt",
	"non-free/MATE",
	"non-free/mail",
	"non-free/math",
	"non-free/misc",
	"non-free/net",
	"non-free/news",
	"non-free/ocaml",
	"non-free/oldlibs",
	"non-free/otherosfs",
	"non-free/perl",
	"non-free/php",
	"non-free/python",
	"non-free/ruby",
	"non-free/science",
	"non-free/shells",
	"non-free/sound",
	"non-free/tex",
	"non-free/text",
	"non-free/Trinity",
	"non-free/utils",
	"non-free/vcs",
	"non-free/video",
	"non-free/virtual",
	"non-free/web",
	"non-free/x11",
	"non-free/xfce",
	"non-free/zope",
	"contrib/admin",
	"contrib/Bases",
	"contrib/Cinnamon",
	"contrib/cli-mono",
	"contrib/comm",
	"contrib/cryptocurrency",
	"contrib/Cutefish",
	"contrib/database",
	"contrib/debian-installer",
	"contrib/debug",
	"contrib/devel",
	"contrib/doc",
	"contrib/editors",
	"contrib/electronics",
	"contrib/embedded",
	"contrib/fonts",
	"contrib/games",
	"contrib/gnome",
	"contrib/gnu-r",
	"contrib/gnustep",
	"contrib/graphics",
	"contrib/hamradio",
	"contrib/haskell",
	"contrib/httpd",
	"contrib/interpreters",
	"contrib/java",
	"contrib/kde",
	"contrib/kernel",
	"contrib/libdevel",
	"contrib/libs",
	"contrib/lisp",
	"contrib/localization",
	"contrib/LXDE",
	"contrib/LxQt",
	"contrib/MATE",
	"contrib/mail",
	"contrib/math",
	"contrib/misc",
	"contrib/net",
	"contrib/news",
	"contrib/ocaml",
	"contrib/oldlibs",
	"contrib/otherosfs",
	"contrib/perl",
	"contrib/php",
	"contrib/python",
	"contrib/ruby",
	"contrib/science",
	"contrib/shells",
	"contrib/sound",
	"contrib/tex",
	"contrib/text",
	"contrib/Trinity",
	"contrib/utils",
	"contrib/vcs",
	"contrib/video",
	"contrib/virtual",
	"contrib/web",
	"contrib/x11",
	"contrib/xfce",
	"contrib/zope",
];

fn read_section_file() -> Result<Vec<String>, std::io::Error> {
	let section_file_path = PathBuf::from("/usr/lib/autobuild4/sets/section");
	let mut section_list = Vec::<String>::new();
	let section_file_content = read_to_string(section_file_path)?;
	section_file_content.split_whitespace().for_each(|v| section_list.push(v.trim().to_string()));
	Ok(section_list)
}

pub fn check_pkgsec(pkgname: &str, pkgsec: String) -> Result<String, PackageError> {
	let section_list = match read_section_file() {
		Ok(seclist) => seclist,
		Err(_) => {
			DEFAULT_PKGSECS.into_iter().map(|x| x.to_string()).collect::<Vec<String>>()
		}
	};
	if section_list.contains(&pkgsec) {
		return Ok(pkgsec)
	}
	Err(PackageError {
		pkgname: pkgname.to_string(),
		error: PackageErrorType::InvalidPKGSECError(pkgsec)
	})
}
